name: YAML Guard

on:
  pull_request:
    paths:
      - '**/*.yml'
      - '**/*.yaml'
      - '.pre-commit-config.yaml'
  push:
    branches: [ main ]
    paths:
      - '**/*.yml'
      - '**/*.yaml'
      - '.pre-commit-config.yaml'

jobs:
  precommit:
    name: Pre-commit (YAML Guard hooks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install project + pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pre-commit
      - name: Run pre-commit on all files
        run: |
          pre-commit run --all-files

  guard:
    name: YAML Guard (annotations + PR comment)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write   # needed to post PR comments with GITHUB_TOKEN

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      # Run YAML Guard twice (K8s + Secrets), capture JSON, and merge
      - name: Run YAML Guard and collect findings
        id: collect
        run: |
          set -e
          python - <<'PY'
          import json, glob, yaml as pyyaml
          from yamlguard.core.loader import load_yaml
          from yamlguard.core.rules import apply_rules
          from yamlguard.core.recommend import suggest_for_file

          # Load rules
          k8s = pyyaml.safe_load(open("policies/k8s/core.yaml", encoding="utf-8")) or []
          sec = pyyaml.safe_load(open("policies/security/secrets.yaml", encoding="utf-8")) or []
          all_rules = k8s + sec

          findings = []
          suggestions = []

          for path in glob.glob("**/*.y*ml", recursive=True):
              try:
                  text = open(path, encoding="utf-8").read()
                  doc = load_yaml(text)
              except Exception:
                  continue

              fs = apply_rules(doc, all_rules)
              for f in fs:
                  f["file"] = path
              findings.extend(fs)

              combo = suggest_for_file(path, fs, text)
              if combo:
                  suggestions.append({
                      "file": path,
                      "title": combo.title,
                      "rationale": combo.rationale,
                      "diff": combo.diff,
                      "confidence": combo.confidence
                  })

          with open("findings.json","w",encoding="utf-8") as f:
              json.dump({"findings": findings, "suggestions": suggestions}, f, ensure_ascii=False)

          # Outputs for later steps
          if findings:
              open("${GITHUB_OUTPUT}","a").write("has_findings=true\n")
          if suggestions:
              open("${GITHUB_OUTPUT}","a").write("has_suggestions=true\n")
          PY


      # Emit GitHub Annotations + Step Summary, and expose an output if findings exist
      - name: Annotate & summarize
        id: annotate
        if: always()
        run: |
          python - <<'PY'
          import json, os, sys
          data = json.load(open("findings.json", encoding="utf-8"))
          fins = data.get("findings", [])

          # GitHub Annotations
          for x in fins:
              sev = (x.get("severity","") or "").lower()
              level = "error" if sev in ("high","critical") else "warning"
              msg = f"[{x.get('severity','').upper()}] {x.get('rule_id','')}: {x.get('message','')}"
              file = x.get("file","")
              line = x.get("line")
              if file:
                  if line:
                      print(f"::{level} file={file},line={line}::{msg}")
                  else:
                      print(f"::{level} file={file}::{msg}")
              else:
                  print(f"::{level}::{msg}")

          # Step summary
          summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
          if summary_path:
              with open(summary_path, "a", encoding="utf-8") as s:
                  if not fins:
                      s.write("### YAML Guard: no findings ✅\n")
                  else:
                      s.write(f"### YAML Guard: {len(fins)} finding(s) ❌\n\n")
                      for x in fins:
                          loc = (x.get("file","") or "")
                          if x.get("line"):
                              loc += f":{x['line']}"
                          s.write(f"- **{x.get('severity','')}** `{x.get('rule_id','')}` — {x.get('message','')}\n")
                          if loc:
                              s.write(f"  \n  `{loc}`\n")
                          snip = x.get("snippet")
                          if snip:
                              s.write(f"  \n```yaml\n{snip}\n```\n")

          # Output flag for next step
          if fins:
              with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as out:
                  out.write("has_findings=true\n")
          PY

      # Post a PR comment with a readable, condensed report
      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.collect.outputs.has_suggestions == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('findings.json','utf8'));
            const sugs = data.suggestions || [];
            if (!sugs.length) { core.info('No suggestions.'); return; }

            const lines = [];
            lines.push(`### YAML Guard — suggested patches 💡`);
            lines.push(`Combined, ready-to-apply diffs per file (replace placeholder digests before merging).`);
            lines.push('');

            const capped = sugs.slice(0, 10);
            for (const s of capped) {
              lines.push(`**${s.title}** — ${s.rationale} _(confidence: ${Math.round((s.confidence||0)*100)}%)_`);
              lines.push(`\n\`\`\`diff\n${s.diff}\n\`\`\``);
            }
            if (sugs.length > 10) lines.push(`\n… and **${sugs.length - 10}** more.`);

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: lines.join('\n')
            });

      - name: Upload findings/suggestions
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yaml-guard-findings
          path: findings.json

      # Finally: fail the job if there are findings
      - name: Fail if findings exist
        if: steps.annotate.outputs.has_findings == 'true'
        run: exit 1
